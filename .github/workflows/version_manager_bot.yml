name: バージョン管理BOT

on:
  pull_request:
    branches: 
      - main
    types:
      - opened
      - labeled

jobs:
  version_manage:
    name: 実行

    runs-on: ubuntu-latest

    env:
      PROJ_NAME: AutoVersionIncrementWithGitHubAction

    steps:
      - name: リポジトリの内容を取得
        uses: actions/checkout@v2
    
      - name: リリースラベルの有無
        id: check_release_label
        run: |
          PR_LABELS=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | \
          jq -r '.[].name')
          HAS_RELEASE_LABEL=false
          if [[ $PR_LABELS == *"リリース"* ]]; then
            HAS_RELEASE_LABEL=true
          fi
          echo "has_release_label=$HAS_RELEASE_LABEL" >> $GITHUB_OUTPUT

      - name: PRタイトルのバージョンを取得
        id: pr_title_version
        if: ${{ steps.check_release_label.outputs.has_release_label == 'true' }}
        run: |
          PR_TITLE_VERSION=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | \
          jq -r '.title')
          echo 
          echo "pr_title_version=$PR_TITLE_VERSION" >> $GITHUB_OUTPUT

      - name: アプリバージョンを取得
        id: proj_marketing_version
        if: ${{ steps.check_release_label.outputs.has_release_label == 'true' }}
        run: |
          PROJ_MARKETING_VERSION=$(sed -n '/MARKETING_VERSION/{s/MARKETING_VERSION = //;s/;//;s/^[[:space:]]*//;p;q;}' ${{ env.PROJ_NAME }}.xcodeproj/project.pbxproj)
          echo "proj_marketing_version=$PROJ_MARKETING_VERSION" >> $GITHUB_OUTPUT

      - name: PRタイトルのバージョンとアプリバージョンを比較
        id: version_comparison
        if: ${{ steps.check_release_label.outputs.has_release_label == 'true' }}
        run: |
          PR_TITLE_VERSION="${{ steps.pr_title_version.outputs.pr_title_version }}"
          PROJ_MARKETING_VERSION="${{ steps.proj_marketing_version.outputs.proj_marketing_version }}"

          if ! [[ $PR_TITLE_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ && $PROJ_MARKETING_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "バージョン番号がセマンティックバージョニング形式ではありません"
            exit 1
          fi

          IFS='.' read -ra pr_title_version_parts <<< "$PR_TITLE_VERSION"
          IFS='.' read -ra proj_marketing_version_parts <<< "$PROJ_MARKETING_VERSION"

          pr_title_major_version=${pr_title_version_parts[0]}
          pr_title_minor_version=${pr_title_version_parts[1]}
          pr_title_patch_version=${pr_title_version_parts[2]}

          proj_marketing_major_version=${proj_marketing_version_parts[0]}
          proj_marketing_minor_version=${proj_marketing_version_parts[1]}
          proj_marketing_patch_version=${proj_marketing_version_parts[2]}

          if ((pr_title_major_version > proj_marketing_major_version)) ||
             ((pr_title_major_version == proj_marketing_major_version && pr_title_minor_version > proj_marketing_minor_version)) ||
             ((pr_title_major_version == proj_marketing_major_version && pr_title_minor_version == proj_marketing_minor_version && pr_title_patch_version > proj_marketing_patch_version)); then
            echo "PR_TITLE_VERSION は MARKETING_VERSION よりも大きいバージョンです"
            echo "has_app_update=true" >> $GITHUB_OUTPUT
          elif ((pr_title_major_version == proj_marketing_major_version && pr_title_minor_version == proj_marketing_minor_version && pr_title_patch_version == proj_marketing_patch_version)); then
            echo "PR_TITLE_VERSION は MARKETING_VERSION と同じバージョンです"
            echo "has_app_update=false" >> $GITHUB_OUTPUT
          else
            echo "PR_TITLE_VERSION は MARKETING_VERSION よりも小さいバージョンです"
            exit 1
          fi

      - name: バージョンの更新
        if: ${{ steps.check_release_label.outputs.has_release_label == 'true' && steps.version_comparison.outputs.has_app_update == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PBXPROJ_PATH="${{ env.PROJ_NAME }}".xcodeproj/project.pbxproj
          NEW_VERSION="${{ steps.pr_title_version.outputs.pr_title_version }}"
          sed -i "s/MARKETING_VERSION = .*/MARKETING_VERSION = $NEW_VERSION;/" $PBXPROJ_PATH
          git diff $PBXPROJ_PATH
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git fetch
          git checkout develop
          git add $PBXPROJ_PATH
          git commit -m "update: $NEW_VERSION"
          git push origin develop
